#labels Deprecated
CQEngine is a NoSQL database engine for performing SQL-like queries on standard Java collections, with the goal of returning results _faster than iteration would allow_. Response times are in the order of _microseconds_.

CQEngine is somewhat similar to [http://en.wikipedia.org/wiki/Language_Integrated_Query Microsoft LINQ], or [http://code.google.com/p/lambdaj/ LambdaJ for Java], but internally CQEngine uses indexing and set theory rather than iteration to process queries.

== Performance and Time Complexity ==
To compare the performance of CQEngine versus iteration, let's consider an example.

Let's assume we have an online car dealership. The dealership has a website with a catalogue of 100,000 cars. So it has a collection of `Car` objects. Every car object has a number of fields containing the price, manufacturer, model, number of doors etc. For the purpose of the example, let's ignore setter and getter methods, and assume Cars are immutable.
{{{
public class Car {
    enum Color {RED, GREEN, BLUE, BLACK, WHITE}
    public final int carId;
    public final String manufacturer;
    public final String model;
    public final Color color;
    public final int doors;
    public final double price;

    public Car(int carId, String manufacturer, String model, Color color, int doors, double price) {
        this.carId = carId;
        this.manufacturer = manufacturer;
        this.model = model;
        this.color = color;
        this.doors = doors;
        this.price = price;
    }
}
}}}

For the sake of the example, let's say the collection of Cars is created by the following method:
{{{
    public static Set<Car> createCollectionOfCars(int numCars) {
        Set<Car> cars = new LinkedHashSet<Car>(numCars);
        for (int carId = 0; carId < numCars; carId++) {
            final Car car;
            switch (carId % 10) {
                case 0:
                    car = new Car(carId, "Ford", "Focus", Car.Color.BLUE, 5, 5000.00);
                    break;
                case 1:
                    car = new Car(carId, "Ford", "Fusion", Car.Color.RED, 3, 3999.99);
                    break;                    
                case 2:
                    car = new Car(carId, "Ford", "Taurus", Car.Color.BLACK, 4, 6000.00);
                    break;                    
                case 3:
                    car = new Car(carId, "Honda", "Civic", Car.Color.WHITE, 5, 4000.00);
                    break;                    
                case 4:
                    car = new Car(carId, "Honda", "Accord", Car.Color.GREEN, 5, 3000.00);
                    break;                    
                case 5:
                    car = new Car(carId, "Honda", "Insight", Car.Color.BLACK, 5, 5000.00);
                    break;                    
                case 6:
                    car = new Car(carId, "Toyota", "Avensis", Car.Color.BLACK, 5, 5999.95);
                    break;                    
                case 7:
                    car = new Car(carId, "Toyota", "Prius", Car.Color.BLUE, 3, 8500.00);
                    break;                    
                case 8:
                    car = new Car(carId, "Toyota", "Hilux", Car.Color.RED, 5, 7800.55);
                    break;                    
                case 9:
                    car = new Car(carId, "BMW", "M6", Car.Color.BLUE, 2, 9000.23);
                    break;                    
                default:
                    throw new IllegalStateException();
            }
            cars.add(car);
        }
        return cars;
    }
}}}

As such, some statistics about the collection:
  * 30% of cars are blue
  * 30% of cars are black
  * 20% of cars are red
  * 10% of cars are green
  * 10% of cars are white
  * 60% of cars have 5 doors
  * 20% of cars have 3 doors
  * 10% of cars have 4 doors
  * 10% of cars have 2 doors

=== Iteration ===
The classic way to retrieve objects matching some criteria from a collection, is to iterate through the collection and apply some tests to each object. If the object matches the criteria, then it is added to a result set. This is repeated for every object in the collection.

Lets call the number of objects in the collection _n_. Lets call the number of tests to be applied to each object _t_. If there were 10,000 objects in the collection (_n_ = 10,000) and 5 tests to apply to each object (_t_ = 5), then performing the query would require _n_ x _t_ tests, or 50,000 tests to be applied to the collection in total. For every _additional_ object added to the collection, _five_ additional tests would need to be performed. As such the performance of queries would degrade steeply as additional objects were added. The [http://en.wikipedia.org/wiki/Time_complexity time complexity] of this iteration approach is O(_n_ _t_).

It should be clear that performing queries using iteration, is like performing SQL queries on a database table which does not have any indexes.

=== CQEngine ===



|| Query Method || 